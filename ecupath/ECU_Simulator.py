import PCANBasic
import time

# Initialize PCAN
pcan = PCANBasic.PCANBasic()
channel = PCANBasic.PCAN_USBBUS1
baudrate = PCANBasic.PCAN_BAUD_500K
result = pcan.Initialize(channel, baudrate)
if result != PCANBasic.PCAN_ERROR_OK:
    print("Error initializing PCAN channel:", result)
    exit(1)
hex_tuple = (0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09)#, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87,0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09,0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x87, 0x09, 0xFF, 0x59, 0x02, 0x09, 0xE1, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B, 0x59, 0x02, 0x09, 0xE1, 0x4F, 0x87, 0x09, 0xE1, 0x5B)
#   hex_tuple = (123, 45, 67, 9, 89, 90, 12, 9, 34, 56, 78, 9, 1, 2, 3, 9, 4, 5, 6, 9, 7, 8, 9, 9, 10, 11, 12, 9, 13, 14)

def Base_message_format():
    msg = PCANBasic.TPCANMsg()
    msg.ID = 0x763  # Arbitration ID
    msg.MSGTYPE = PCANBasic.PCAN_MESSAGE_STANDARD  # Standard frame
    msg.LEN = 8  # Length of the data
    return msg

def send_positive_response():
    msg = Base_message_format()
    msg.DATA = (0x06, 0x50, 0x03, 0x32, 0x00, 0x13, 0x88, 0x00)  # Data
    result = pcan.Write(channel, msg)
    if result != PCANBasic.PCAN_ERROR_OK:
        print("Error sending positive response:", result)

def send_first_frame(hex_tuple):
    # Get the length of the tuple
    tuple_length = len(hex_tuple)
    # Convert the length to hexadecimal
    #hex_length = hex(tuple_length+3)
    length = tuple_length + 3
     # Data
    print("In send first frame")
    msg = Base_message_format()
    msg.DATA = (0x10, length, 0x59, 0x02, 0x09, hex_tuple[0], hex_tuple[1], hex_tuple[2])  # Data

    result = pcan.Write(channel, msg)
    if result != PCANBasic.PCAN_ERROR_OK:
        print("Error sending first frame:", result)


def send_single_frame():
 
    # Convert the length to hexadecimal
    #hex_length = hex(tuple_length+3)
    
    print("In send single frame")
    msg = Base_message_format()
    msg.DATA = (0x07, 0x59, 0x02, 0x09,0xE1, 0x4F, 0x87, 0x09)  # Data

    result = pcan.Write(channel, msg)
    if result != PCANBasic.PCAN_ERROR_OK:
        print("Error sending first frame:", result)

def NRC():
    print("Send NRC")
    msg = Base_message_format()
    msg.DATA = (0x03, 0x7F, 0x19, 0x78, 0x00, 0x00, 0x00, 0x00)  # Data
    result = pcan.Write(channel, msg)
    if result != PCANBasic.PCAN_ERROR_OK:
        print("Error sending NRC:", result)

def print_can_message(msg):
    print(f"ID: {msg.ID:X}, Type: {msg.MSGTYPE}, Length: {msg.LEN}, Data: {[hex(byte) for byte in msg.DATA[:msg.LEN]]}")

current_pos = 0x21
start_index=3

def increment(pos):
    pos += 1
    if pos > 0x2F:
        pos = 0x20
    return pos
    # Prepare the data for the consecutive frame

def consecutive_frame(index, hex_tuple):
   # print("start index value:",start_index)
    global current_pos
    global start_index
    print("start index value:",start_index)

    print(f"Sending consecutive frame {index}")

    # Prepare the data for the consecutive frame
    frame_data = [current_pos]  # Frame index with 0x20 OR-ed
    current_pos = increment(current_pos)


    for i in range(start_index, start_index + 7):
        if i < len(hex_tuple):
            frame_data.append(hex_tuple[i])
        else:
            frame_data.append(0xAA)  # Fill with 0xAA if out of hex_tuple range
    start_index+=8

    # Fill the remaining bytes with 0xAA if needed
    while len(frame_data) < 8:
        frame_data.append(0xAA)

    msg = Base_message_format()
    msg.DATA = tuple(frame_data)

    result = pcan.Write(channel, msg)
    if result != PCANBasic.PCAN_ERROR_OK:
        print(f"Error sending consecutive frame {index}:", result)


def negative_response():
    print("Sending negative response frame")
    msg = Base_message_format()
    msg.DATA = (0x03, 0x7F, 0x10, 0x78, 0x00, 0x00, 0x00, 0x00)
    result = pcan.Write(channel, msg)
    
    if result != PCANBasic.PCAN_ERROR_OK:
        print("Error sending negative response")

def check_session_control_frame(msg):
    print("Checking for session control")
    if tuple(msg.DATA) == (0x02, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00):
        negative_response()
        send_positive_response()
        return True
    return False

def handle_request_frame(msg):
    if tuple(msg.DATA) == (0x03, 0x19, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00):
        print("Received request Frame.")
        print_can_message(msg)
        #NRC()
        send_first_frame(hex_tuple)
       # send_single_frame()
        return True
    return False

def handle_flow_control(msg):
    if msg.DATA[0] == 0x30:
        user_required_length = int(msg.DATA[1])  # from flow control we have to take the length and send consecutive frames based on length

        print("Received Flow Control Frame.")
        print_can_message(msg)


        # Start sending consecutive frames based on the user_required_length
        for i in range(1, user_required_length + 1):
            consecutive_frame(i, hex_tuple)  # Send the data starting from 3 + (i - 1) * 7
            time.sleep(0.01)  # Small delay between consecutive frames
        return True
    return False
def tester_frame(msg):
       if tuple(msg.DATA) == (0x02, 0x3E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00):
        print("tester frame present")
        






def main_loop():
    start_time = time.time()
    duration = 15 * 60  # 15 minutes in seconds

    try:
        while time.time() - start_time < duration:
            result, msg, timestamp = pcan.Read(channel)
            if result == PCANBasic.PCAN_ERROR_OK:
                if check_session_control_frame(msg):
                    continue

                if handle_request_frame(msg):
                    continue

                if handle_flow_control(msg):

                    continue
                if tester_frame(msg):

                    pass
                # If none of the above, just print the message
                print_can_message(msg)

            elif result != PCANBasic.PCAN_ERROR_QRCVEMPTY:
                print(f"Error reading message: {result}")

            time.sleep(0.01)  # Sleep to avoid busy-waiting
    except KeyboardInterrupt:
        print("Program interrupted by user")
    finally:
        # Uninitialize the PCAN channel
        pcan.Uninitialize(channel)
        print("PCAN channel uninitialized")

if __name__ == "__main__":
    main_loop()